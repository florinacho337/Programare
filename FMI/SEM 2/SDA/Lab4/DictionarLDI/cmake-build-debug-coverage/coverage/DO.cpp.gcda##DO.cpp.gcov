        -:    0:Source:/home/florin/FMI/SEM2/SDA/Lab4/DictionarLDI/DO.cpp
        -:    0:Graph:/home/florin/FMI/SEM2/SDA/Lab4/DictionarLDI/cmake-build-debug-coverage/CMakeFiles/DictionarLDI.dir/DO.cpp.gcno
        -:    0:Data:/home/florin/FMI/SEM2/SDA/Lab4/DictionarLDI/cmake-build-debug-coverage/CMakeFiles/DictionarLDI.dir/DO.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "Iterator.h"
        -:    2:#include "DO.h"
        -:    3:#include <iostream>
        -:    4:
        -:    5:#include <exception>
        -:    6:using namespace std;
        -:    7:
function _ZN2DO5alocaEv called 7309 returned 100% blocks executed 100%
     7309:    8:int DO::aloca() {
     7309:    9:    int i = this->primLiber;
     7309:   10:    primLiber = urm[primLiber];
     7309:   11:    return i;
     7309:   11-block  0
        -:   12:}
        -:   13:
function _ZN2DO7dealocaEi called 6024 returned 100% blocks executed 100%
     6024:   14:void DO::dealoca(int i) {
     6024:   15:    prec[i] = -1;
     6024:   16:    urm[i] = primLiber;
     6024:   17:    primLiber = i;
     6024:   18:}
        -:   19:
function _ZN2DO10creeazaNodESt4pairIiiE called 7309 returned 100% blocks executed 100%
     7309:   20:int DO::creeazaNod(TElem elem) {
     7309:   21:    int i = aloca();
     7309:   21-block  0
call    0 returned 7309
     7309:   22:    if(i != -1){
branch  0 taken 7309 (fallthrough)
branch  1 taken 0
     7309:   23:        this->e[i] = elem;
     7309:   23-block  0
call    0 returned 7309
     7309:   24:        urm[i] = -1;
     7309:   25:        prec[i] = -1;
        -:   26:    }
     7309:   27:    return i;
     7309:   27-block  0
        -:   28:}
        -:   29:
function _ZN2DO5redimEv called 4 returned 100% blocks executed 90%
        4:   30:void DO::redim() {
        4:   31:    this->cp = 2*this->cp;
   15004*:   32:    auto *nElems = new TElem[this->cp];
        4:   32-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   32-block  1
    %%%%%:   32-block  2
call    2 never executed
        4:   32-block  3
call    3 returned 4
    15000:   32-block  4
call    4 returned 15000
    15004:   32-block  5
branch  5 taken 15000
branch  6 taken 4 (fallthrough)
       4*:   33:    int *nUrm = new int[this->cp];
        4:   33-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   33-block  1
    %%%%%:   33-block  2
call    2 never executed
        4:   33-block  3
call    3 returned 4
       4*:   34:    int *nPrec = new int[this->cp];
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   34-block  0
    %%%%%:   34-block  1
call    2 never executed
        4:   34-block  2
call    3 returned 4
    15000:   35:    for(int i = 0; i < this->cp - 1; ++i) {
    14996:   35-block  0
    15000:   35-block  1
branch  0 taken 14996
branch  1 taken 4 (fallthrough)
    14996:   36:        if(i < this->n){
    14996:   36-block  0
branch  0 taken 7500 (fallthrough)
branch  1 taken 7496
     7500:   37:            nElems[i] = this->e[i];
     7500:   37-block  0
call    0 returned 7500
     7500:   38:            nUrm[i] = this->urm[i];
     7500:   39:            nPrec[i] = this->prec[i];
        -:   40:        } else {
     7496:   41:            nUrm[i] = i + 1;
     7496:   42:            nPrec[i + 1] = i;
     7496:   42-block  0
        -:   43:        }
        -:   44:    }
        4:   45:    nPrec[this->n] = nUrm[this->cp - 1] = -1;
        4:   46:    this->primLiber = this->n;
        4:   47:    delete[] this->e;
        4:   47-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   47-block  1
call    2 returned 4
        4:   48:    delete[] this->urm;
        4:   48-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   48-block  1
call    2 returned 4
        4:   49:    delete[] this->prec;
        4:   49-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   49-block  1
call    2 returned 4
        4:   50:    this->e = nElems;
        4:   51:    this->urm = nUrm;
        4:   52:    this->prec = nPrec;
        4:   53:}
        -:   54:
function _ZN2DOC2EPFbiiE called 14 returned 100% blocks executed 85%
       14:   55:DO::DO(Relatie r) {
        -:   56:	/* de adaugat */
       14:   57:    this->rel = r;
       14:   58:    this->prim = this->ultim = -1;
    7014*:   59:    this->e = new TElem[this->cp];
       14:   59-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:   59-block  1
    %%%%%:   59-block  2
call    2 never executed
       14:   59-block  3
call    3 returned 14
     7000:   59-block  4
call    4 returned 7000
     7014:   59-block  5
branch  5 taken 7000
branch  6 taken 14 (fallthrough)
      14*:   60:    this->urm = new int[this->cp];
       14:   60-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:   60-block  1
    %%%%%:   60-block  2
call    2 never executed
       14:   60-block  3
call    3 returned 14
      14*:   61:    this->prec = new int[this->cp];
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:   61-block  0
    %%%%%:   61-block  1
call    2 never executed
       14:   61-block  2
call    3 returned 14
     7000:   62:    for(int i = 0; i < this->cp - 1; ++i) {
     7000:   62-block  0
branch  0 taken 6986
branch  1 taken 14 (fallthrough)
     6986:   63:        urm[i] = i + 1;
     6986:   64:        prec[i + 1] = i;
     6986:   64-block  0
        -:   65:    }
       14:   66:    urm[cp-1] = prec[0] = -1;
       14:   67:    this->primLiber = 0;
       14:   68:    this->n = 0;
       14:   69:}
        -:   70:
        -:   71://adauga o pereche (cheie, valoare) in dictionar
        -:   72://daca exista deja cheia in dictionar, inlocuieste valoarea asociata cheii si returneaza vechea valoare
        -:   73://daca nu exista cheia, adauga perechea si returneaza null
function _ZN2DO6adaugaEii called 7309 returned 100% blocks executed 100%
     7309:   74:TValoare DO::adauga(TCheie c, TValoare v) {
        -:   75:	/* de adaugat */
     7309:   76:    if(this->n == this->cp)
     7309:   76-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 7305
        4:   77:        redim();
        4:   77-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
     7309:   78:    TElem elem;
     7309:   79:    elem.first = c;
     7309:   80:    elem.second = v;
     7309:   81:    TValoare val = NULL_TVALOARE;
        -:   82:
     7309:   83:    int nou = creeazaNod(elem);
     7309:   83-block  0
call    0 returned 7309
branch  1 taken 7309 (fallthrough)
branch  2 taken 0 (throw)
     7309:   84:    if(this->prim == -1) {
     7309:   84-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 7297
       12:   85:        this->prim = nou;
       12:   86:        this->ultim = nou;
       12:   86-block  0
        -:   87:    }
        -:   88:    else{
     7297:   89:        int poz = this->prim;
  9044253:   90:        while(poz != -1 && !rel(c, this->e[poz].first))
     7297:   90-block  0
  9044253:   90-block  1
branch  0 taken 9044188 (fallthrough)
branch  1 taken 65
  9044188:   90-block  2
call    2 returned 9044188
branch  3 taken 9044188 (fallthrough)
branch  4 taken 0 (throw)
  9044188:   90-block  3
branch  5 taken 9036956 (fallthrough)
branch  6 taken 7232
  9036956:   90-block  4
     7297:   90-block  5
  9044253:   90-block  6
branch  7 taken 9036956
branch  8 taken 7297 (fallthrough)
  9036956:   91:            poz = urm[poz];
  9036956:   91-block  0
     7297:   92:        if(poz == -1) {
     7297:   92-block  0
branch  0 taken 65 (fallthrough)
branch  1 taken 7232
       65:   93:            prec[nou] = this->ultim;
       65:   94:            urm[this->ultim] = nou;
       65:   95:            this->ultim = nou;
       65:   95-block  0
     7232:   96:        } else if(c == this->e[poz].first) {
     7232:   96-block  0
branch  0 taken 220 (fallthrough)
branch  1 taken 7012
      220:   97:            val = this->e[poz].second;
      220:   98:            this->e[poz].second = v;
      220:   98-block  0
     7012:   99:        } else if(poz == this->prim){
     7012:   99-block  0
branch  0 taken 49 (fallthrough)
branch  1 taken 6963
       49:  100:            urm[nou] = this->prim;
       49:  101:            prec[this->prim] = nou;
       49:  102:            this->prim = nou;
       49:  102-block  0
        -:  103:        } else {
     6963:  104:            urm[nou] = poz;
     6963:  105:            urm[prec[poz]] = nou;
     6963:  106:            prec[nou] = prec[poz];
     6963:  107:            prec[poz] = nou;
     6963:  107-block  0
        -:  108:        }
        -:  109:    }
     7309:  110:    if(val != NULL_TVALOARE)
     7309:  110-block  0
branch  0 taken 220 (fallthrough)
branch  1 taken 7089
      220:  111:        return val;
      220:  111-block  0
     7089:  112:    this->n++;
     7089:  113:	return NULL_TVALOARE;
     7089:  113-block  0
        -:  114:}
        -:  115:
        -:  116://cauta o cheie si returneaza valoarea asociata (daca dictionarul contine cheia) sau null
function _ZNK2DO5cautaEi called 19931 returned 100% blocks executed 100%
    19931:  117:TValoare DO::cauta(TCheie c) const {
        -:  118:	/* de adaugat */
    19931:  119:    int poz = this->prim;
 36228143:  120:    while(poz != -1 && !rel(c, this->e[poz].first))
    19931:  120-block  0
 36228143:  120-block  1
branch  0 taken 36227990 (fallthrough)
branch  1 taken 153
 36227990:  120-block  2
call    2 returned 36227990
branch  3 taken 36208212 (fallthrough)
branch  4 taken 19778
 36208212:  120-block  3
    19931:  120-block  4
 36228143:  120-block  5
branch  5 taken 36208212
branch  6 taken 19931 (fallthrough)
 36208212:  121:        poz = urm[poz];
 36208212:  121-block  0
    19931:  122:    if(poz != -1 && c == this->e[poz].first)
    19931:  122-block  0
branch  0 taken 19778 (fallthrough)
branch  1 taken 153
    19778:  122-block  1
branch  2 taken 13649 (fallthrough)
branch  3 taken 6129
    13649:  123:        return this->e[poz].second;
    13649:  123-block  0
     6282:  124:	return NULL_TVALOARE;	
     6282:  124-block  0
        -:  125:}
        -:  126:
function _ZNK2DO22ceaMaiFrecventaValoareEv called 2 returned 100% blocks executed 92%
        2:  127:TValoare DO::ceaMaiFrecventaValoare() const {
        2:  128:    TValoare maxim = NULL_TVALOARE;
        2:  129:    int frecv_maxima = 0;
        2:  130:    int poz = this->prim;
        2:  131:    DO frecvente = DO{this->rel};
        2:  131-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       28:  132:    while(poz != -1){
        2:  132-block  0
       28:  132-block  1
branch  0 taken 26
branch  1 taken 2 (fallthrough)
       26:  133:        TCheie val = this->e[poz].second;
       26:  134:        TValoare frecventa = frecvente.cauta(val);
       26:  134-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:  135:        if(frecventa == NULL_TVALOARE)
       26:  135-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 15
       11:  136:            frecvente.adauga(val, 1);
       11:  136-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:  137:        else
       15:  138:            frecvente.adauga(val, frecventa + 1);
       15:  138-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       26:  139:        poz = urm[poz];
       26:  139-block  0
        -:  140:    }
        2:  141:    Iterator it = frecvente.iterator();
        2:  141-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  142:    it.prim();
        2:  142-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       13:  143:    while (it.valid()) {
        2:  143-block  0
       13:  143-block  1
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13:  143-block  2
branch  3 taken 11
branch  4 taken 2 (fallthrough)
       11:  144:        int frecv = it.element().second;
       11:  144-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  145:        TValoare val = it.element().first;
       11:  145-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  146:        if(frecv > frecv_maxima) {
       11:  146-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 9
        2:  147:            frecv_maxima = frecv;
        2:  148:            maxim = val;
        2:  148-block  0
        -:  149:        }
       11:  150:        it.urmator();
       11:  150-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:  151:    }
        2:  152:    return maxim;
        2:  152-block  0
        2:  153:}
        2:  153-block  0
call    0 returned 2
    $$$$$:  153-block  1
call    1 never executed
        -:  154:
        -:  155://sterge o cheie si returneaza valoarea asociata (daca exista) sau null
function _ZN2DO6stergeEi called 6306 returned 100% blocks executed 100%
     6306:  156:TValoare DO::sterge(TCheie c) {
        -:  157:	/* de adaugat */
     6306:  158:    int poz = this->prim;
     6581:  159:    while(poz != -1 && !rel(c, this->e[poz].first))
     6306:  159-block  0
     6581:  159-block  1
branch  0 taken 6419 (fallthrough)
branch  1 taken 162
     6419:  159-block  2
call    2 returned 6419
branch  3 taken 275 (fallthrough)
branch  4 taken 6144
      275:  159-block  3
     6306:  159-block  4
     6581:  159-block  5
branch  5 taken 275
branch  6 taken 6306 (fallthrough)
      275:  160:        poz = urm[poz];
      275:  160-block  0
     6306:  161:    if(poz != -1 && c == this->e[poz].first){
     6306:  161-block  0
branch  0 taken 6144 (fallthrough)
branch  1 taken 162
     6144:  161-block  1
branch  2 taken 6024 (fallthrough)
branch  3 taken 120
     6024:  162:        TValoare val = this->e[poz].second;
     6024:  163:        if(poz == this->prim)
     6024:  163-block  0
branch  0 taken 6014 (fallthrough)
branch  1 taken 10
     6014:  164:            this->prim = urm[poz];
     6014:  164-block  0
     6024:  165:        if(poz == this->ultim)
     6024:  165-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 6010
       14:  166:            this->ultim = prec[poz];
       14:  166-block  0
     6024:  167:        if(urm[poz] != -1)
     6024:  167-block  0
branch  0 taken 6010 (fallthrough)
branch  1 taken 14
     6010:  168:            prec[urm[poz]] = prec[poz];
     6010:  168-block  0
     6024:  169:        if(prec[poz] != -1)
     6024:  169-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 6014
       10:  170:            urm[prec[poz]] = urm[poz];
       10:  170-block  0
     6024:  171:        dealoca(poz);
     6024:  171-block  0
call    0 returned 6024
     6024:  172:        this->n--;
     6024:  173:        return val;
        -:  174:    }
      282:  175:	return NULL_TVALOARE;
      282:  175-block  0
        -:  176:}
        -:  177:
        -:  178://returneaza numarul de perechi (cheie, valoare) din dictionar
function _ZNK2DO3dimEv called 6039 returned 100% blocks executed 100%
     6039:  179:int DO::dim() const {
        -:  180:	/* de adaugat */
     6039:  181:	return this->n;
     6039:  181-block  0
        -:  182:}
        -:  183:
        -:  184://verifica daca dictionarul e vid
function _ZNK2DO3vidEv called 7 returned 100% blocks executed 100%
        7:  185:bool DO::vid() const {
        -:  186:	/* de adaugat */
        7:  187:	return this->n == 0;
        7:  187-block  0
        -:  188:}
        -:  189:
function _ZNK2DO8iteratorEv called 33 returned 100% blocks executed 100%
       33:  190:Iterator DO::iterator() const {
       33:  191:	return  Iterator(*this);
       33:  191-block  0
call    0 returned 33
        -:  192:}
        -:  193:
function _ZN2DOD2Ev called 14 returned 100% blocks executed 100%
       14:  194:DO::~DO() {
        -:  195:	/* de adaugat */
       14:  196:    delete[] this->e;
       14:  196-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:  196-block  1
call    2 returned 14
       14:  197:    delete[] this->prec;
       14:  197-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:  197-block  1
call    2 returned 14
       14:  198:    delete[] this->urm;
       14:  198-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:  198-block  1
call    2 returned 14
       14:  199:}
