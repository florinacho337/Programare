     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...se da un sir de quadwords
    14                                      ; se da o const k
    15                                      ;sa se adune const k la fiecare quad din sir
    16 00000000 010000000000000002-         s dq 1, 2, 3
    16 00000009 000000000000000300-
    16 00000012 000000000000       
    17                                      ls equ ($-s)/8
    18 00000018 <res 00000018>              r resq ls
    19                                      k equ 0ah
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 B903000000                      mov ecx, ls
    26 00000005 BE00000000                      mov esi, 0
    27                                          repeta:
    28 0000000A 8B86[00000000]                      mov eax, dword[s+esi+0]
    29 00000010 8B96[04000000]                      mov edx, dword[s+esi+4]
    30 00000016 83C00A                              add eax,  k
    31 00000019 83D200                              adc edx, 0
    32 0000001C 8986[18000000]                      mov dword[r+esi+0], eax
    33 00000022 8996[1C000000]                      mov dword[r+esi+4], edx
    34 00000028 83C608                              add esi, 8
    35 0000002B E2DD                             loop repeta
    36                                          ; exit(0)
    37 0000002D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 0000002F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
