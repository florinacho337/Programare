     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 46                          a db 70
    15 00000001 0C                          b db 12
    16 00000002 16                          c db 22
    17 00000003 29                          d db 41
    18 00000004 8C1D                        a1 dw 7564
    19 00000006 7B10                        b1 dw 4219
    20 00000008 060E                        c1 dw 3590
    21 0000000A 1752                        d1 dw 21015
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          ;(a-b-b-c)+(a-c-c-d)
    28 00000000 B800000000                      mov eax, 0
    29 00000005 A0[00000000]                    mov al, [a]
    30 0000000A 2A05[01000000]                  sub al, [b]
    31 00000010 2A05[01000000]                  sub al, [b]
    32 00000016 2A05[02000000]                  sub al, [c]
    33 0000001C BA00000000                      mov edx, 0
    34 00000021 8A15[00000000]                  mov dl, [a]
    35 00000027 2A15[02000000]                  sub dl, [c]
    36 0000002D 2A15[02000000]                  sub dl, [c]
    37 00000033 2A15[03000000]                  sub dl, [d]
    38 00000039 28D0                            sub al, dl
    39                                          ;a1+b1-(c1+d1)+100h
    40 0000003B B800000000                      mov eax, 0
    41 00000040 66A1[04000000]                  mov ax, [a1]
    42 00000046 660305[06000000]                add ax, [b1]
    43 0000004D BA00000000                      mov edx, 0
    44 00000052 668B15[08000000]                mov dx, [c1]
    45 00000059 660315[0A000000]                add dx, [d1]
    46 00000060 6629D0                          sub ax, dx
    47 00000063 66050001                        add ax, 100h
    48                                          ; exit(0)
    49 00000067 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000069 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
