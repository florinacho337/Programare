     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; Se da un sir de cuvinte s. Sa se construiasca sirul de octeti d, astfel incat d sa contina pentru fiecare pozitie din s:
    14                                      ; - numarul de biti de 0, daca numarul este negativ
    15                                      ; - numarul de biti de 1, daca numarul este pozitiv
    16                                      ; d : 3, 3, 5, 7
    17 00000000 EAFF9100D0FF7F00            s dw -22 , 145, -48, 127
    18                                      ls equ ($-s)/2
    19 00000008 <res 00000004>              d resb ls
    20 0000000C 00                          copie db 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 BE[00000000]                     mov esi, s
    27 00000005 BF[08000000]                     mov edi, d
    28 0000000A B904000000                       mov ecx, ls
    29 0000000F B800000000                       mov eax, 0
    30 00000014 FC                               cld
    31                                           repeta1:
    32 00000015 66AD                                lodsw ; AX <-- [esi]
    33 00000017 890D[0C000000]                      mov [copie], ecx
    34 0000001D B90F000000                          mov ecx, 15
    35 00000022 BA00000000                          mov edx, 0
    36                                              repeta2:
    37 00000027 BB01000000                              mov ebx, 1
    38 0000002C 21C3                                    and ebx, eax
    39 0000002E 01DA                                    add edx, ebx
    40 00000030 66D1E8                                  shr ax, 1
    41 00000033 E2F2                                loop repeta2
    42 00000035 8B0D[0C000000]                      mov ecx, [copie]
    43 0000003B 3C01                                cmp al, 1
    44 0000003D 7402                                je negativ
    45 0000003F 750A                                jne pozitiv
    46                                              negativ:
    47 00000041 83C201                                  add edx, 1
    48 00000044 B010                                    mov al, 16
    49 00000046 29D0                                    sub eax, edx
    50 00000048 AA                                      stosb ; [edi] <-- al
    51 00000049 E2CA                                    loop repeta1
    52                                              pozitiv:
    53 0000004B 89D0                                    mov eax, edx
    54 0000004D AA                                      stosb ; [edi] <-- al
    55 0000004E E2C5                                    loop repeta1
    56                                          ; exit(0)
    57 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
