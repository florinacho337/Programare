        -:    0:Source:/home/florin/FMI/SEM2/OOP/Lab 5/labrefacut/service.c
        -:    0:Graph:/home/florin/FMI/SEM2/OOP/Lab 5/labrefacut/cmake-build-debug-coverage/CMakeFiles/labrefacut.dir/service.c.gcno
        -:    0:Data:/home/florin/FMI/SEM2/OOP/Lab 5/labrefacut/cmake-build-debug-coverage/CMakeFiles/labrefacut.dir/service.c.gcda
        -:    0:Runs:1
        -:    1:#include "MyList.h"
        -:    2:#include "domain.h"
        -:    3:#include "service.h"
        -:    4:#include <string.h>
        -:    5:
function createService called 2 returned 100% blocks executed 100%
        2:    6:Service createService(){
        -:    7:    Service rez;
        2:    8:    rez.undoList = createEmpty((DestroyFct)destroyList);
        2:    8-block  0
call    0 returned 2
        2:    9:    rez.listaTranzactii = createEmpty((DestroyFct)destroyTranzactie);
call    0 returned 2
        2:   10:    return rez;
        -:   11:}
        -:   12:
function destroyService called 2 returned 100% blocks executed 100%
        2:   13:void destroyService(Service* service){
        2:   14:    destroyList(service->listaTranzactii);
        2:   14-block  0
call    0 returned 2
        2:   15:    destroyList(service->undoList);
call    0 returned 2
        2:   16:}
        -:   17:
function service_add called 5 returned 100% blocks executed 100%
        5:   18:void service_add(Service* service, int zi, int suma, char* tip, char* descriere)
        -:   19:{
        5:   20:    Tranzactie* tranzactie = creeazaTranzactie(zi, suma, tip, descriere);
        5:   20-block  0
call    0 returned 5
        5:   21:    MyList* toUndo = copyList(service->listaTranzactii, (CopyFct)copyTranzactie);
call    0 returned 5
        5:   22:    add(service->listaTranzactii, tranzactie);
call    0 returned 5
        5:   23:    add(service->undoList, toUndo);
call    0 returned 5
        5:   24:}
        -:   25:
function service_delete called 2 returned 100% blocks executed 100%
        2:   26:void service_delete(Service* service, int poz)
        -:   27:{
        2:   28:    MyList* toUndo = copyList(service->listaTranzactii, (CopyFct)copyTranzactie);
        2:   28-block  0
call    0 returned 2
        2:   29:    removeP(service->listaTranzactii, poz);
call    0 returned 2
        2:   30:    add(service->undoList, toUndo);
call    0 returned 2
        2:   31:}
        -:   32:
function service_modify called 1 returned 100% blocks executed 100%
        1:   33:void service_modify(Service* service, int poz, int zi, int suma, char* tip, char* descriere)
        -:   34:{
        1:   35:    Tranzactie* tranzactie = creeazaTranzactie(zi, suma, tip, descriere);
        1:   35-block  0
call    0 returned 1
        1:   36:    MyList* toUndo = copyList(service->listaTranzactii, (CopyFct)copyTranzactie);
call    0 returned 1
        1:   37:    Tranzactie* tr = set(service->listaTranzactii, poz, tranzactie);
call    0 returned 1
        1:   38:    destroyTranzactie(tr);
call    0 returned 1
        1:   39:    add(service->undoList, toUndo);
call    0 returned 1
        1:   40:}
        -:   41:
        -:   42:
function service_view_type called 2 returned 100% blocks executed 100%
        2:   43:MyList* service_view_type(Service *service, char* criteriu) {
        -:   44:    MyList *repo_nou;
        2:   45:    repo_nou = createEmpty((DestroyFct)destroyTranzactie);
        2:   45-block  0
call    0 returned 2
        -:   46:    int i;
        2:   47:    if(strcmp(criteriu,"intrare") == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        4:   48:        for (i = 0; i < size(service->listaTranzactii); i++) {
        1:   48-block  0
        3:   48-block  1
        4:   48-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1
        3:   49:            Tranzactie *tr = (Tranzactie *) get(service->listaTranzactii, i);
        3:   49-block  0
call    0 returned 3
        3:   50:            if (strcmp(tr->tip, "intrare") == 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   51:                add(repo_nou, copyTranzactie(tr));
        1:   51-block  0
call    0 returned 1
call    1 returned 1
        -:   52:            }
        -:   53:        }
        -:   54:    }
        1:   55:    else if (strcmp(criteriu,"iesire") == 0)
        1:   55-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   56:    {
        4:   57:        for(i=0; i<size(service->listaTranzactii); i++) {
        1:   57-block  0
        3:   57-block  1
        4:   57-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:   58:            Tranzactie *tr = (Tranzactie*) get(service->listaTranzactii, i);
        3:   58-block  0
call    0 returned 3
        3:   59:            if (strcmp(tr->tip, "iesire") == 0) {
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   60:                add(repo_nou, copyTranzactie(tr));
        2:   60-block  0
call    0 returned 2
call    1 returned 2
        -:   61:            }
        -:   62:        }
        -:   63:    }
        2:   64:    return repo_nou;
        2:   64-block  0
        -:   65:}
        -:   66:
function service_view_sum called 2 returned 100% blocks executed 100%
        2:   67:MyList* service_view_sum(Service *service, int suma, int ordine){
        -:   68:    MyList* repo_nou;
        2:   69:    repo_nou = createEmpty((DestroyFct)destroyTranzactie);
        2:   69-block  0
call    0 returned 2
        -:   70:    int i;
        -:   71:    //luam ordine = 1 ca greater si ordine = 2 ca less
        2:   72:    if (ordine == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:   73:    {
        4:   74:        for(i=0;i<size(service->listaTranzactii);i++)
        1:   74-block  0
        3:   74-block  1
        4:   74-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1
        -:   75:        {
        3:   76:            Tranzactie *tr = (Tranzactie*) get(service->listaTranzactii, i);
        3:   76-block  0
call    0 returned 3
        3:   77:            if(tr->suma >= suma)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   78:                add(repo_nou, copyTranzactie(tr));
        1:   78-block  0
call    0 returned 1
call    1 returned 1
        -:   79:        }
        -:   80:    }
        1:   81:    else if (ordine == 2)
        1:   81-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   82:    {
        4:   83:        for(i=0;i<size(service->listaTranzactii);i++)
        1:   83-block  0
        3:   83-block  1
        4:   83-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        -:   84:        {
        3:   85:            Tranzactie *tr = (Tranzactie*) get(service->listaTranzactii, i);
        3:   85-block  0
call    0 returned 3
        3:   86:            if(tr->suma <= suma)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   87:                add(repo_nou, copyTranzactie(tr));
        2:   87-block  0
call    0 returned 2
call    1 returned 2
        -:   88:        }
        -:   89:    }
        2:   90:    return repo_nou;
        2:   90-block  0
        -:   91:}
        -:   92:
function service_select_sort called 4 returned 100% blocks executed 100%
        4:   93:MyList* service_select_sort(Service * service, int criteriu, int ordine) {
        -:   94:    int i, j;
        -:   95:    MyList* repo_nou;
        4:   96:    repo_nou = copyList(service->listaTranzactii, (CopyFct)copyTranzactie);
        4:   96-block  0
call    0 returned 4
       12:   97:    for (i = 0; i < size(service->listaTranzactii)-1; i++)
        8:   97-block  0
       12:   97-block  1
call    0 returned 12
branch  1 taken 8
branch  2 taken 4 (fallthrough)
       20:   98:                for (j = i + 1; j < size(service->listaTranzactii); j++)
        8:   98-block  0
       12:   98-block  1
       20:   98-block  2
call    0 returned 20
branch  1 taken 12
branch  2 taken 8 (fallthrough)
        -:   99:                {
       12:  100:                    Tranzactie * tr1 = (Tranzactie *)get(repo_nou, i);
       12:  100-block  0
call    0 returned 12
       12:  101:                    Tranzactie * tr2 = (Tranzactie *)get(repo_nou, j);
call    0 returned 12
       12:  102:                    if (criteriu == 1 && ordine == 1 && tr1->suma > tr2->suma && tr1->suma != 0 && tr2->suma != 0)
branch  0 taken 6 (fallthrough)
branch  1 taken 6
        6:  102-block  0
branch  2 taken 3 (fallthrough)
branch  3 taken 3
        3:  102-block  1
branch  4 taken 1 (fallthrough)
branch  5 taken 2
        1:  102-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:  102-block  3
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        -:  103:                    {
        1:  104:                        set(repo_nou, i, tr2);
        1:  104-block  0
call    0 returned 1
        1:  105:                        set(repo_nou, j, tr1);
call    0 returned 1
        -:  106:                    }
       11:  107:                    else if (criteriu == 1 && ordine == 2 && tr1->suma < tr2->suma && tr1->suma != 0 && tr2->suma != 0)
       11:  107-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 6
        5:  107-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 2
        3:  107-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        2:  107-block  3
branch  6 taken 2 (fallthrough)
branch  7 taken 0
        2:  107-block  4
branch  8 taken 2 (fallthrough)
branch  9 taken 0
        -:  108:                    {
        2:  109:                        set(repo_nou, i, tr2);
        2:  109-block  0
call    0 returned 2
        2:  110:                        set(repo_nou, j, tr1);
call    0 returned 2
        -:  111:                    }
        9:  112:                    else if (criteriu == 2 && ordine == 1 && tr1->zi > tr2->zi && tr1->zi != 0 && tr2->zi != 0)
        9:  112-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 3
        6:  112-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 3
        3:  112-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 2
        1:  112-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:  112-block  4
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        -:  113:                    {
        1:  114:                        set(repo_nou, i, tr2);
        1:  114-block  0
call    0 returned 1
        1:  115:                        set(repo_nou, j, tr1);
call    0 returned 1
        -:  116:                    }
        8:  117:                    else if (criteriu == 2 && ordine == 2 && tr1->zi < tr2->zi && tr1->zi != 0 && tr2->zi != 0)
        8:  117-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 3
        5:  117-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 2
        3:  117-block  2
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        2:  117-block  3
branch  6 taken 2 (fallthrough)
branch  7 taken 0
        2:  117-block  4
branch  8 taken 2 (fallthrough)
branch  9 taken 0
        -:  118:                    {
        2:  119:                        set(repo_nou, i, tr2);
        2:  119-block  0
call    0 returned 2
        2:  120:                        set(repo_nou, j, tr1);
call    0 returned 2
        -:  121:                    }
        -:  122:                }
        4:  123:    return repo_nou;
        4:  123-block  0
        -:  124:
        -:  125:}
        -:  126:
function service_undo called 4 returned 100% blocks executed 100%
        4:  127:int service_undo(Service* service){
        4:  128:    if (size(service->undoList) == 0)
        4:  128-block  0
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
        1:  129:        return 1;
        1:  129-block  0
        3:  130:    destroyList(service->listaTranzactii);
        3:  130-block  0
call    0 returned 3
        3:  131:    service->listaTranzactii = removeLast(service->undoList);
call    0 returned 3
        3:  132:    return 0;
        -:  133:}
