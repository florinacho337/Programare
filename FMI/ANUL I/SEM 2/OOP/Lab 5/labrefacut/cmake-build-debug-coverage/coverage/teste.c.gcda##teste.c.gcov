        -:    0:Source:/home/florin/FMI/SEM2/OOP/Lab 5/labrefacut/teste.c
        -:    0:Graph:/home/florin/FMI/SEM2/OOP/Lab 5/labrefacut/cmake-build-debug-coverage/CMakeFiles/labrefacut.dir/teste.c.gcno
        -:    0:Data:/home/florin/FMI/SEM2/OOP/Lab 5/labrefacut/cmake-build-debug-coverage/CMakeFiles/labrefacut.dir/teste.c.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include <stdio.h>
        -:    3:#include "service.h"
        -:    4:#include "MyList.h"
        -:    5:#include "domain.h"
        -:    6:#include "teste.h"
        -:    7:#include <malloc.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10://ruleaza testele pt domain
function teste_domain called 1 returned 100% blocks executed 69%
        1:   11:void teste_domain()
        -:   12:{
        1:   13:    printf("start teste domain...\n");
        1:   13-block  0
call    0 returned 1
        1:   14:    char *tip = (char*)malloc(3);
        1:   15:    char *descriere = (char*)malloc(3);
        1:   16:    strncpy(tip, "ok", 3);
        1:   17:    strncpy(descriere, "ok", 3);
        1:   18:    Tranzactie* test = creeazaTranzactie(2, 3, tip, descriere);
call    0 returned 1
       1*:   19:    assert(test->zi==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  0
call    2 never executed
       1*:   20:    assert(test->suma==3);
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  1
call    2 never executed
       1*:   21:    assert(strcmp(test->tip, tip) == 0);
        1:   21-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   21-block  1
call    2 never executed
       1*:   22:    assert(strcmp(test->descriere, descriere) == 0);
        1:   22-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   22-block  1
call    2 never executed
        1:   23:    free(tip);
        1:   24:    free(descriere);
        1:   25:    destroyTranzactie(test);
        1:   25-block  0
call    0 returned 1
        1:   26:    printf("finish teste domain...\n");
call    0 returned 1
        1:   27:}
        -:   28:
        -:   29://ruleaza testele pt functiile din repo
function teste_repo called 1 returned 100% blocks executed 100%
        1:   30:void teste_repo()
        -:   31:{
        1:   32:    printf("start teste repo...\n");
        1:   32-block  0
call    0 returned 1
        1:   33:    testCreateList();
call    0 returned 1
        1:   34:    testIterateList();
call    0 returned 1
        1:   35:    testCopyList();
call    0 returned 1
        1:   36:    testResize();
call    0 returned 1
        1:   37:    testListOfLists();
call    0 returned 1
        1:   38:    testListOfInts();
call    0 returned 1
        1:   39:    testRemoveLast();
call    0 returned 1
        1:   40:    printf("finish teste repo...\n");
call    0 returned 1
        -:   41:
        1:   42:}
        -:   43:
        -:   44://ruleaza testele pt functiile din service
function teste_service called 1 returned 100% blocks executed 73%
        1:   45:void  teste_service()
        -:   46:{
        1:   47:    printf("start teste service...\n");
        1:   47-block  0
call    0 returned 1
        -:   48:    Service repo_test_service;
        1:   49:    repo_test_service = createService();
call    0 returned 1
        1:   50:    service_add(&repo_test_service, 2, 3, "ok", "ok");
call    0 returned 1
        1:   51:    Tranzactie *tr = (Tranzactie*)get(repo_test_service.listaTranzactii, 0);
call    0 returned 1
       1*:   52:    assert(tr->zi==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   52-block  0
call    2 never executed
       1*:   53:    assert(tr->suma==3);
        1:   53-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   53-block  1
call    2 never executed
       1*:   54:    assert(strcmp(tr->tip,"ok") == 0);
        1:   54-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   54-block  1
call    2 never executed
       1*:   55:    assert(strcmp(tr->descriere,"ok")==0);
        1:   55-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   55-block  1
call    2 never executed
        1:   56:    service_undo(&repo_test_service);
        1:   56-block  0
call    0 returned 1
       1*:   57:    assert(size(repo_test_service.listaTranzactii) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   57-block  0
call    3 never executed
       1*:   58:    assert(service_undo(&repo_test_service) == 1);
        1:   58-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   58-block  1
call    3 never executed
        1:   59:    service_add(&repo_test_service, 2, 3, "ok", "ok");
        1:   59-block  0
call    0 returned 1
        1:   60:    service_modify(&repo_test_service, 0, 3, 10, "notok", "maiok");
call    0 returned 1
        1:   61:    tr = (Tranzactie*)get(repo_test_service.listaTranzactii, 0);
call    0 returned 1
       1*:   62:    assert(tr->zi==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   62-block  0
call    2 never executed
       1*:   63:    assert(tr->suma==10);
        1:   63-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   63-block  1
call    2 never executed
       1*:   64:    assert(strcmp(tr->tip,"notok")==0);
        1:   64-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   64-block  1
call    2 never executed
       1*:   65:    assert(strcmp(tr->descriere,"maiok")==0);
        1:   65-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   65-block  1
call    2 never executed
        1:   66:    service_undo(&repo_test_service);
        1:   66-block  0
call    0 returned 1
        1:   67:    tr = (Tranzactie*)get(repo_test_service.listaTranzactii, 0);
call    0 returned 1
       1*:   68:    assert(tr->zi==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   68-block  0
call    2 never executed
       1*:   69:    assert(tr->suma==3);
        1:   69-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   69-block  1
call    2 never executed
       1*:   70:    assert(strcmp(tr->tip,"ok") == 0);
        1:   70-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   70-block  1
call    2 never executed
       1*:   71:    assert(strcmp(tr->descriere,"ok")==0);
        1:   71-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   71-block  1
call    2 never executed
        1:   72:    service_delete(&repo_test_service, 0);
        1:   72-block  0
call    0 returned 1
       1*:   73:    assert(size(repo_test_service.listaTranzactii) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   73-block  0
call    3 never executed
        1:   74:    service_undo(&repo_test_service);
        1:   74-block  0
call    0 returned 1
       1*:   75:    assert(size((repo_test_service.listaTranzactii)) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   75-block  0
call    3 never executed
        1:   76:    service_delete(&repo_test_service, 0);
        1:   76-block  0
call    0 returned 1
        1:   77:    service_add(&repo_test_service, 2, 3, "intrare", "ok");
call    0 returned 1
        1:   78:    service_add(&repo_test_service, 52, 123, "iesire", "ok");
call    0 returned 1
        1:   79:    service_add(&repo_test_service, 12, 34, "iesire", "ok");
call    0 returned 1
        -:   80:    MyList* repo_nou;
        1:   81:    repo_nou = service_view_type(&repo_test_service, "intrare");
call    0 returned 1
        1:   82:    tr = (Tranzactie*)get(repo_nou, 0);
call    0 returned 1
       1*:   83:    assert(strcmp(tr->tip,"intrare") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   83-block  0
call    2 never executed
        1:   84:    destroyList(repo_nou);
        1:   84-block  0
call    0 returned 1
        1:   85:    repo_nou = service_view_type(&repo_test_service, "iesire");
call    0 returned 1
        1:   86:    tr = (Tranzactie*)get(repo_nou, 1);
call    0 returned 1
       1*:   87:    assert(strcmp(tr->tip,"iesire")==0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   87-block  0
call    2 never executed
        1:   88:    destroyList(repo_nou);
        1:   88-block  0
call    0 returned 1
        1:   89:    repo_nou = service_view_sum(&repo_test_service, 90, 1);
call    0 returned 1
        1:   90:    tr = (Tranzactie*)get(repo_nou, 0);
call    0 returned 1
       1*:   91:    assert(tr->suma==123);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   91-block  0
call    2 never executed
        1:   92:    destroyList(repo_nou);
        1:   92-block  0
call    0 returned 1
        1:   93:    repo_nou = service_view_sum(&repo_test_service, 90, 2);
call    0 returned 1
        1:   94:    tr = (Tranzactie*)get(repo_nou, 0);
call    0 returned 1
       1*:   95:    assert(tr->suma==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   95-block  0
call    2 never executed
        1:   96:    destroyList(repo_nou);
        1:   96-block  0
call    0 returned 1
        1:   97:    repo_nou = service_select_sort(&repo_test_service, 1, 1);
call    0 returned 1
        1:   98:    tr = (Tranzactie*)get(repo_nou, 0);
call    0 returned 1
       1*:   99:    assert(tr->zi==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   99-block  0
call    2 never executed
        1:  100:    tr = (Tranzactie*)get(repo_nou, 1);
        1:  100-block  0
call    0 returned 1
       1*:  101:    assert(tr->zi==12);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  101-block  0
call    2 never executed
        1:  102:    tr = (Tranzactie*)get(repo_nou, 2);
        1:  102-block  0
call    0 returned 1
       1*:  103:    assert(tr->zi==52);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  103-block  0
call    2 never executed
        1:  104:    destroyList(repo_nou);
        1:  104-block  0
call    0 returned 1
        1:  105:    repo_nou = service_select_sort(&repo_test_service, 1, 2);
call    0 returned 1
        1:  106:    tr = (Tranzactie*)get(repo_nou, 0);
call    0 returned 1
       1*:  107:    assert(tr->zi==52);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  107-block  0
call    2 never executed
        1:  108:    tr = (Tranzactie*)get(repo_nou, 1);
        1:  108-block  0
call    0 returned 1
       1*:  109:    assert(tr->zi==12);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  109-block  0
call    2 never executed
        1:  110:    tr = (Tranzactie*)get(repo_nou, 2);
        1:  110-block  0
call    0 returned 1
       1*:  111:    assert(tr->zi==2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  111-block  0
call    2 never executed
        1:  112:    destroyList(repo_nou);
        1:  112-block  0
call    0 returned 1
        1:  113:    repo_nou = service_select_sort(&repo_test_service, 2, 1);
call    0 returned 1
        1:  114:    tr = (Tranzactie*)get(repo_nou, 0);
call    0 returned 1
       1*:  115:    assert(tr->suma==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  115-block  0
call    2 never executed
        1:  116:    tr = (Tranzactie*)get(repo_nou, 1);
        1:  116-block  0
call    0 returned 1
       1*:  117:    assert(tr->suma==34);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  117-block  0
call    2 never executed
        1:  118:    tr = (Tranzactie*)get(repo_nou, 2);
        1:  118-block  0
call    0 returned 1
       1*:  119:    assert(tr->suma==123);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  119-block  0
call    2 never executed
        1:  120:    destroyList(repo_nou);
        1:  120-block  0
call    0 returned 1
        1:  121:    repo_nou = service_select_sort(&repo_test_service, 2, 2);
call    0 returned 1
        1:  122:    tr = (Tranzactie*)get(repo_nou, 0);
call    0 returned 1
       1*:  123:    assert(tr->suma==123);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  123-block  0
call    2 never executed
        1:  124:    tr = (Tranzactie*)get(repo_nou, 1);
        1:  124-block  0
call    0 returned 1
       1*:  125:    assert(tr->suma==34);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  125-block  0
call    2 never executed
        1:  126:    tr = (Tranzactie*)get(repo_nou, 2);
        1:  126-block  0
call    0 returned 1
       1*:  127:    assert(tr->suma==3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  127-block  0
call    2 never executed
        1:  128:    destroyList(repo_nou);
        1:  128-block  0
call    0 returned 1
        1:  129:    destroyService(&repo_test_service);
call    0 returned 1
        1:  130:    printf("finish teste service...\n");
call    0 returned 1
        1:  131:}
        -:  132:
function run_teste called 1 returned 100% blocks executed 100%
        1:  133:void run_teste()
        -:  134:{
        1:  135:    teste_domain();
        1:  135-block  0
call    0 returned 1
        1:  136:    teste_repo();
call    0 returned 1
        1:  137:    teste_service();
call    0 returned 1
        1:  138:}
