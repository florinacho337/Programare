        -:    0:Source:/home/florin/FMI/SEM2/SDA/Lab4/DictionarLDI/TestExtins.cpp
        -:    0:Graph:/home/florin/FMI/SEM2/SDA/Lab4/DictionarLDI/cmake-build-debug-coverage/CMakeFiles/DictionarLDI.dir/TestExtins.cpp.gcno
        -:    0:Data:/home/florin/FMI/SEM2/SDA/Lab4/DictionarLDI/cmake-build-debug-coverage/CMakeFiles/DictionarLDI.dir/TestExtins.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <exception>
        -:    2:#include <assert.h>
        -:    3:#include <algorithm>
        -:    4:#include <vector>
        -:    5:#include "Iterator.h"
        -:    6:#include "DO.h"
        -:    7:#include "TestExtins.h"
        -:    8:
        -:    9:using namespace std;
        -:   10:
function _Z5crescii called 45158590 returned 100% blocks executed 100%
 45158590:   11:bool cresc(TCheie c1, TCheie c2) {
 45158590:   12:	if (c1 <= c2) {
 45158590:   12-block  0
branch  0 taken 32230 (fallthrough)
branch  1 taken 45126360
    32230:   13:		return true;
    32230:   13-block  0
        -:   14:	} else {
 45126360:   15:		return false;
 45126360:   15-block  0
        -:   16:	}
        -:   17:}
        -:   18:
function _Z4descii called 121095 returned 100% blocks executed 100%
   121095:   19:bool desc(TCheie c1, TCheie c2) {
   121095:   20:	if (c1 >= c2) {
   121095:   20-block  0
branch  0 taken 2012 (fallthrough)
branch  1 taken 119083
     2012:   21:		return true;
     2012:   21-block  0
        -:   22:	} else {
   119083:   23:		return false;
   119083:   23-block  0
        -:   24:	}
        -:   25:}
        -:   26:
function _Z11testCreeazav called 1 returned 100% blocks executed 76%
        1:   27:void testCreeaza() {
        1:   28:	DO d = DO(cresc);
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   29:	assert(d.dim() == 0);
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   29-block  2
call    5 never executed
       1*:   30:	assert(d.vid());
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   30-block  2
call    5 never executed
        -:   31:
        1:   32:	Iterator it = d.iterator();
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33:	it.prim();
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   34:	assert(!it.valid());
        1:   34-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   34-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   34-block  2
call    5 never executed
        -:   35:
       11:   36:	for (int i = 0; i < 10; i++) {
        1:   36-block  0
       10:   36-block  1
       11:   36-block  2
branch  0 taken 10
branch  1 taken 1 (fallthrough)
      10*:   37:		assert(d.cauta(i) == NULL_TVALOARE);
       10:   37-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:   37-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%:   37-block  2
call    5 never executed
        -:   38:	}
        -:   39:
       21:   40:	for (int i = -10; i < 10; i++) {
        1:   40-block  0
       20:   40-block  1
       21:   40-block  2
branch  0 taken 20
branch  1 taken 1 (fallthrough)
      20*:   41:		assert(d.sterge(i) == NULL_TVALOARE);
       20:   41-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   41-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 20
    %%%%%:   41-block  2
call    5 never executed
        -:   42:	}
        1:   43:}
        1:   43-block  0
call    0 returned 1
    $$$$$:   43-block  1
call    1 never executed
        -:   44:
function _Z9testCautaPFbiiE called 2 returned 100% blocks executed 72%
        2:   45:void testCauta(Relatie r) {
        2:   46:	DO d = DO(r);
        2:   46-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   47:	int cMin = 0;
        2:   48:	int cMax = 10;
        -:   49:	try {
       24:   50:		for (int i = cMin; i <= cMax; i++) {
        2:   50-block  0
       22:   50-block  1
       24:   50-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
       22:   51:			d.adauga(i, i + 1);
       22:   51-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        -:   52:		}
        -:   53:		assert(true);
    =====:   54:	} catch (exception&) {
    $$$$$:   54-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   54-block  1
call    2 never executed
    =====:   55:		assert(false);
call    0 never executed
        -:   56:	}
        2:   57:	int intervalDim = 10;
       24:   58:	for (int i = cMin; i <= cMax; i++) {
        2:   58-block  0
       22:   58-block  1
       24:   58-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
      22*:   59:		assert(d.cauta(i) == i + 1);
       22:   59-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   59-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    %%%%%:   59-block  2
call    5 never executed
        -:   60:	}
       22:   61:	for (int i = cMin - intervalDim; i < cMin; i++) {
        2:   61-block  0
       20:   61-block  1
       22:   61-block  2
branch  0 taken 20
branch  1 taken 2 (fallthrough)
      20*:   62:		assert(d.cauta(i) == NULL_TVALOARE);
       20:   62-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   62-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 20
    %%%%%:   62-block  2
call    5 never executed
        -:   63:	}
       20:   64:	for (int i = cMax + 1; i < cMax + intervalDim; i++) {
        2:   64-block  0
       18:   64-block  1
       20:   64-block  2
branch  0 taken 18
branch  1 taken 2 (fallthrough)
      18*:   65:		assert(d.cauta(i) == NULL_TVALOARE);
       18:   65-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:   65-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 18
    %%%%%:   65-block  2
call    5 never executed
        -:   66:	}
        2:   67:}
        2:   67-block  0
call    0 returned 2
    $$$$$:   67-block  1
call    1 never executed
        -:   68:
function _Z9testCautav called 1 returned 100% blocks executed 100%
        1:   69:void testCauta() {
        1:   70:	testCauta(cresc);
        1:   70-block  0
call    0 returned 1
        1:   71:	testCauta(desc);
call    0 returned 1
        1:   72:}
        -:   73:
        -:   74://genereaza un vector continand in ordine aleatoare valorile naturale din intervalul inchis [cMin, cMax]
function _Z21cheiInOrdineAleatoareii called 15 returned 100% blocks executed 89%
       15:   75:vector<int> cheiInOrdineAleatoare(int cMin, int cMax) {
       15:   76:	vector<int> chei;
       15:   76-block  0
call    0 returned 15
    13275:   77:	for (int c = cMin; c <= cMax; c++) {
    13260:   77-block  0
    13275:   77-block  1
branch  0 taken 13260
branch  1 taken 15 (fallthrough)
    13260:   78:		chei.push_back(c);
    13260:   78-block  0
call    0 returned 13260
branch  1 taken 13260 (fallthrough)
branch  2 taken 0 (throw)
        -:   79:	}
       15:   80:	int n = chei.size();
       15:   80-block  0
call    0 returned 15
    13260:   81:	for (int i = 0; i < n - 1; i++) {
    13260:   81-block  0
branch  0 taken 13245
branch  1 taken 15 (fallthrough)
    13245:   82:		int j = i + rand() % (n - i);
    13245:   82-block  0
call    0 returned 13245
    13245:   83:		swap(chei[i], chei[j]);
call    0 returned 13245
call    1 returned 13245
call    2 returned 13245
        -:   84:	}
       15:   85:	return chei;
       15:   85-block  0
       15:   85-block  1
    =====:   86:}
    $$$$$:   86-block  0
call    0 never executed
        -:   87:
function _Z21populeazaDOVidIdenticR2DOii called 6 returned 100% blocks executed 80%
        6:   88:void populeazaDOVidIdentic(DO& doc, int cMin, int cMax) {
        6:   89:	vector<int> chei = cheiInOrdineAleatoare(cMin, cMax);
        6:   89-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   90:	int n = chei.size();
        6:   90-block  0
call    0 returned 6
     6242:   91:	for (int i = 0; i < n; i++) {
     6236:   91-block  0
     6242:   91-block  1
branch  0 taken 6236
branch  1 taken 6 (fallthrough)
    6236*:   92:		assert(doc.adauga(chei[i], chei[i]) == NULL_TVALOARE);
     6236:   92-block  0
call    0 returned 6236
call    1 returned 6236
call    2 returned 6236
branch  3 taken 6236 (fallthrough)
branch  4 taken 0 (throw)
     6236:   92-block  1
branch  5 taken 0 (fallthrough)
branch  6 taken 6236
    %%%%%:   92-block  2
call    7 never executed
        -:   93:	}
        6:   94:}
        6:   94-block  0
call    0 returned 6
    $$$$$:   94-block  1
call    1 never executed
        -:   95:
function _Z15rePopuleazaDOShR2DOiii called 2 returned 100% blocks executed 81%
        2:   96:void rePopuleazaDOSh(DO& doc, int cMin, int cMax, int shift) {
        2:   97:	vector<int> chei = cheiInOrdineAleatoare(cMin, cMax);
        2:   97-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   98:	int n = chei.size();
        2:   98-block  0
call    0 returned 2
      204:   99:	for (int i = 0; i < n; i++) {
      202:   99-block  0
      204:   99-block  1
branch  0 taken 202
branch  1 taken 2 (fallthrough)
     202*:  100:		assert(doc.adauga(chei[i], chei[i] - shift) == chei[i]);
      202:  100-block  0
call    0 returned 202
call    1 returned 202
call    2 returned 202
branch  3 taken 202 (fallthrough)
branch  4 taken 0 (throw)
      202:  100-block  1
call    5 returned 202
branch  6 taken 0 (fallthrough)
branch  7 taken 202
    %%%%%:  100-block  2
call    8 never executed
        -:  101:	}
        2:  102:}
        2:  102-block  0
call    0 returned 2
    $$$$$:  102-block  1
call    1 never executed
        -:  103:
function _Z13populeazaDOShR2DOiii called 4 returned 100% blocks executed 85%
        4:  104:void populeazaDOSh(DO& doc, int cMin, int cMax, int shift) {
        4:  105:	vector<int> chei = cheiInOrdineAleatoare(cMin, cMax);
        4:  105-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  106:	int n = chei.size();
        4:  106-block  0
call    0 returned 4
      423:  107:	for (int i = 0; i < n; i++) {
      419:  107-block  0
      423:  107-block  1
branch  0 taken 419
branch  1 taken 4 (fallthrough)
      419:  108:		doc.adauga(chei[i], chei[i] - shift);
      419:  108-block  0
call    0 returned 419
call    1 returned 419
call    2 returned 419
branch  3 taken 419 (fallthrough)
branch  4 taken 0 (throw)
        -:  109:	}
        4:  110:}
        4:  110-block  0
call    0 returned 4
    $$$$$:  110-block  1
call    1 never executed
        -:  111:
function _Z17testAdaugaSiCautaPFbiiE called 2 returned 100% blocks executed 80%
        2:  112:void testAdaugaSiCauta(Relatie r) {
        2:  113:	DO d = DO(r);
        2:  113-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  114:	int cMin = 100;
        2:  115:	int cMax = 200;
        -:  116:
        2:  117:	populeazaDOVidIdentic(d, cMin, cMax);
        2:  117-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      204:  118:	for (int c = cMin; c <= cMax; c++) {
        2:  118-block  0
      202:  118-block  1
      204:  118-block  2
branch  0 taken 202
branch  1 taken 2 (fallthrough)
     202*:  119:		assert(d.cauta(c) == c);
      202:  119-block  0
call    0 returned 202
branch  1 taken 202 (fallthrough)
branch  2 taken 0 (throw)
      202:  119-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 202
    %%%%%:  119-block  2
call    5 never executed
        -:  120:	}
       2*:  121:	assert(d.dim() == (cMax - cMin + 1));
        2:  121-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  121-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  121-block  2
call    5 never executed
        -:  122:
        2:  123:	rePopuleazaDOSh(d, cMin, cMax, 1);
        2:  123-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  124:	assert(d.dim() == (cMax - cMin + 1));
        2:  124-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  124-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  124-block  2
call    5 never executed
        -:  125:
        2:  126:	populeazaDOSh(d, 2 * cMax, 3 * cMax, 2 * cMax - cMin);
        2:  126-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      404:  127:	for (int c = 2 * cMax; c <= 3 * cMax; c++) {
        2:  127-block  0
      402:  127-block  1
      404:  127-block  2
branch  0 taken 402
branch  1 taken 2 (fallthrough)
     402*:  128:		assert(d.cauta(c) == c - 2 * cMax + cMin);
      402:  128-block  0
call    0 returned 402
branch  1 taken 402 (fallthrough)
branch  2 taken 0 (throw)
      402:  128-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 402
    %%%%%:  128-block  2
call    5 never executed
        -:  129:	}
       2*:  130:	assert(d.dim() == (cMax - cMin + 1) + (cMax + 1));
        2:  130-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  130-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  130-block  2
call    5 never executed
        -:  131:
        2:  132:	Iterator it = d.iterator();
        2:  132-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  133:	it.prim();
        2:  133-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  134:	if (it.valid()) {
        2:  134-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  134-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2:  135:		TCheie cPrec = it.element().first;
        2:  135-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  136:		assert(d.cauta(cPrec) != NULL_TVALOARE);
        2:  136-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  136-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  136-block  2
call    5 never executed
        2:  137:		it.urmator();
        2:  137-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      604:  138:		while (it.valid()) {
        2:  138-block  0
      604:  138-block  1
call    0 returned 604
branch  1 taken 604 (fallthrough)
branch  2 taken 0 (throw)
      604:  138-block  2
branch  3 taken 602
branch  4 taken 2 (fallthrough)
      602:  139:			TCheie c = it.element().first;
      602:  139-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
     602*:  140:			assert(r(cPrec, c));
      602:  140-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
      602:  140-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 602
    %%%%%:  140-block  2
call    5 never executed
     602*:  141:			assert(d.cauta(c) != NULL_TVALOARE);
      602:  141-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
      602:  141-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 602
    %%%%%:  141-block  2
call    5 never executed
      602:  142:			cPrec = c;
      602:  143:			it.urmator();
      602:  143-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
        -:  144:		}
        -:  145:	}
        -:  146:
        2:  147:}
        2:  147-block  0
call    0 returned 2
    $$$$$:  147-block  1
call    1 never executed
        -:  148:
function _Z10testAdaugav called 1 returned 100% blocks executed 100%
        1:  149:void testAdauga() {
        1:  150:	testAdaugaSiCauta(cresc);
        1:  150-block  0
call    0 returned 1
        1:  151:	testAdaugaSiCauta(desc);
call    0 returned 1
        1:  152:}
        -:  153:
function _Z15testStergeCautaPFbiiE called 2 returned 100% blocks executed 78%
        2:  154:void testStergeCauta(Relatie r) {
        2:  155:	DO d = DO(r);
        2:  155-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  156:	int cMin = 10;
        2:  157:	int cMax = 20;
        2:  158:	populeazaDOVidIdentic(d, cMin, cMax);
        2:  158-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       42:  159:	for (int c = cMax + 1; c <= 2 * cMax; c++) {
        2:  159-block  0
       40:  159-block  1
       42:  159-block  2
branch  0 taken 40
branch  1 taken 2 (fallthrough)
      40*:  160:		assert(d.sterge(c) == NULL_TVALOARE);
       40:  160-block  0
call    0 returned 40
branch  1 taken 40 (fallthrough)
branch  2 taken 0 (throw)
       40:  160-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 40
    %%%%%:  160-block  2
call    5 never executed
        -:  161:	}
        2:  162:	int dim = cMax - cMin + 1;
       2*:  163:	assert(d.dim() == dim);
        2:  163-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  163-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  163-block  2
call    5 never executed
       24:  164:	for (int c = cMin; c <= cMax; c++) {
        2:  164-block  0
       22:  164-block  1
       24:  164-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
      22*:  165:		assert(d.sterge(c) == c);
       22:  165-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  165-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    %%%%%:  165-block  2
call    5 never executed
      22*:  166:		assert(d.cauta(c) == NULL_TVALOARE);
       22:  166-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  166-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    %%%%%:  166-block  2
call    5 never executed
        -:  167:
       22:  168:		Iterator it = d.iterator();
       22:  168-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  169:		it.prim();
       22:  169-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  170:		if (it.valid()) {
       22:  170-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  170-block  1
branch  3 taken 20 (fallthrough)
branch  4 taken 2
       20:  171:			TCheie cPrec = it.element().first;
       20:  171-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  172:			it.urmator();
       20:  172-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
      110:  173:			while (it.valid()) {
       20:  173-block  0
      110:  173-block  1
call    0 returned 110
branch  1 taken 110 (fallthrough)
branch  2 taken 0 (throw)
      110:  173-block  2
branch  3 taken 90
branch  4 taken 20 (fallthrough)
       90:  174:				TCheie c = it.element().first;
       90:  174-block  0
call    0 returned 90
branch  1 taken 90 (fallthrough)
branch  2 taken 0 (throw)
      90*:  175:				assert(r(cPrec, c));
       90:  175-block  0
call    0 returned 90
branch  1 taken 90 (fallthrough)
branch  2 taken 0 (throw)
       90:  175-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 90
    %%%%%:  175-block  2
call    5 never executed
       90:  176:				cPrec = c;
       90:  177:				it.urmator();
       90:  177-block  0
call    0 returned 90
branch  1 taken 90 (fallthrough)
branch  2 taken 0 (throw)
        -:  178:			}
        -:  179:		}
        -:  180:
       22:  181:		dim--;
      22*:  182:		assert(d.dim() == dim);
       22:  182-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  182-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    %%%%%:  182-block  2
call    5 never executed
        -:  183:
        -:  184:	}
        -:  185:
       24:  186:	for (int c = cMin; c <= cMax; c++) {
        2:  186-block  0
       22:  186-block  1
       24:  186-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
      22*:  187:		assert(d.sterge(c) == NULL_TVALOARE);
       22:  187-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:  187-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    %%%%%:  187-block  2
call    5 never executed
        -:  188:	}
       2*:  189:	assert(d.vid());
        2:  189-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  189-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  189-block  2
call    5 never executed
       2*:  190:	assert(d.dim() == 0);
        2:  190-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  190-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  190-block  2
call    5 never executed
        -:  191:
        2:  192:}
        2:  192-block  0
call    0 returned 2
    $$$$$:  192-block  1
call    1 never executed
        -:  193:
function _Z10testStergev called 1 returned 100% blocks executed 100%
        1:  194:void testSterge() {
        1:  195:	testStergeCauta(cresc);
        1:  195-block  0
call    0 returned 1
        1:  196:	testStergeCauta(desc);
call    0 returned 1
        1:  197:}
        -:  198:
function _Z12testIteratorPFbiiE called 2 returned 100% blocks executed 78%
        2:  199:void testIterator(Relatie r) {
        2:  200:	DO d = DO(r);
        2:  200-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  201:	Iterator it = d.iterator();
        2:  201-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  202:	assert(!it.valid());
        2:  202-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  202-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  202-block  2
call    5 never executed
        2:  203:	it.prim();
        2:  203-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  204:	assert(!it.valid());
        2:  204-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  204-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  204-block  2
call    5 never executed
        2:  205:	int cMin = 100;
        2:  206:	int cMax = 300;
        2:  207:	vector<int> chei = cheiInOrdineAleatoare(cMin, cMax);
        2:  207-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  208:	int n = chei.size();
        2:  208-block  0
call    0 returned 2
      404:  209:	for (int i = 0; i < n; i++) {
      402:  209-block  0
      404:  209-block  1
branch  0 taken 402
branch  1 taken 2 (fallthrough)
     402*:  210:		assert(d.adauga(chei[i], chei[n - i - 1]) == NULL_TVALOARE);
      402:  210-block  0
call    0 returned 402
call    1 returned 402
call    2 returned 402
branch  3 taken 402 (fallthrough)
branch  4 taken 0 (throw)
      402:  210-block  1
branch  5 taken 0 (fallthrough)
branch  6 taken 402
    %%%%%:  210-block  2
call    7 never executed
        -:  211:	}
        -:  212:
        2:  213:	Iterator itD = d.iterator();
        2:  213-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  214:	assert(itD.valid());
        2:  214-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  214-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  214-block  2
call    5 never executed
        2:  215:	itD.prim();
        2:  215-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  216:	assert(itD.valid());
        2:  216-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  216-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  216-block  2
call    5 never executed
        -:  217:
        2:  218:	TCheie cPrec = itD.element().first;
        2:  218-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      200:  219:	for (int i=1; i<100; i++){
        2:  219-block  0
      198:  219-block  1
      200:  219-block  2
branch  0 taken 198
branch  1 taken 2 (fallthrough)
     198*:  220:		assert(cPrec == itD.element().first);
      198:  220-block  0
call    0 returned 198
branch  1 taken 198 (fallthrough)
branch  2 taken 0 (throw)
      198:  220-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 198
    %%%%%:  220-block  2
call    5 never executed
        -:  221:	}
        2:  222:    itD.urmator();
        2:  222-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      402:  223:	while (itD.valid()) {
        2:  223-block  0
      402:  223-block  1
call    0 returned 402
branch  1 taken 402 (fallthrough)
branch  2 taken 0 (throw)
      402:  223-block  2
branch  3 taken 400
branch  4 taken 2 (fallthrough)
      400:  224:		TCheie c = itD.element().first;
      400:  224-block  0
call    0 returned 400
branch  1 taken 400 (fallthrough)
branch  2 taken 0 (throw)
     400*:  225:		assert(cMin <= c && c <= cMax);
      400:  225-block  0
branch  0 taken 400 (fallthrough)
branch  1 taken 0
      400:  225-block  1
branch  2 taken 400 (fallthrough)
branch  3 taken 0
    %%%%%:  225-block  2
call    4 never executed
     400*:  226:		assert(d.cauta(c) != NULL_TVALOARE);
      400:  226-block  0
call    0 returned 400
branch  1 taken 400 (fallthrough)
branch  2 taken 0 (throw)
      400:  226-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 400
    %%%%%:  226-block  2
call    5 never executed
     400*:  227:		assert(r(cPrec, c));
      400:  227-block  0
call    0 returned 400
branch  1 taken 400 (fallthrough)
branch  2 taken 0 (throw)
      400:  227-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 400
    %%%%%:  227-block  2
call    5 never executed
      400:  228:		cPrec = c;
      400:  229:		itD.urmator();
      400:  229-block  0
call    0 returned 400
branch  1 taken 400 (fallthrough)
branch  2 taken 0 (throw)
        -:  230:	}
        2:  231:}
        2:  231-block  0
call    0 returned 2
call    1 returned 2
    $$$$$:  231-block  1
call    2 never executed
    $$$$$:  231-block  2
call    3 never executed
        -:  232:
function _Z14testCantitativv called 1 returned 100% blocks executed 77%
        1:  233:void testCantitativ(){
        1:  234:	DO d = DO(cresc);
        1:  234-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  235:	int cMin = -3000;
        1:  236:	int cMax = 3000;
        1:  237:	vector<int> chei  = cheiInOrdineAleatoare(cMin, cMax);
        1:  237-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  238:    populeazaDOVidIdentic(d, cMin, cMax);
        1:  238-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     6002:  239:    for (int c = cMin; c <= cMax; c++){
        1:  239-block  0
     6001:  239-block  1
     6002:  239-block  2
branch  0 taken 6001
branch  1 taken 1 (fallthrough)
    6001*:  240:      	assert(d.cauta(c) == c);
     6001:  240-block  0
call    0 returned 6001
branch  1 taken 6001 (fallthrough)
branch  2 taken 0 (throw)
     6001:  240-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 6001
    %%%%%:  240-block  2
call    5 never executed
        -:  241:    }
       1*:  242:    assert(d.dim() == cMax - cMin + 1);
        1:  242-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  242-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  242-block  2
call    5 never executed
        1:  243:    Iterator it  = d.iterator();
        1:  243-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  244:    assert(it.valid());
        1:  244-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  244-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  244-block  2
call    5 never executed
        1:  245:    it.prim();
        1:  245-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  246:    assert(it.valid());
        1:  246-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  246-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  246-block  2
call    5 never executed
     6002:  247:    for (int i = 0; i < d.dim(); i++) {
        1:  247-block  0
     6001:  247-block  1
     6002:  247-block  2
call    0 returned 6002
branch  1 taken 6002 (fallthrough)
branch  2 taken 0 (throw)
     6002:  247-block  3
branch  3 taken 6001
branch  4 taken 1 (fallthrough)
     6001:  248:    	it.urmator();
     6001:  248-block  0
call    0 returned 6001
branch  1 taken 6001 (fallthrough)
branch  2 taken 0 (throw)
        -:  249:    }
       1*:  250:    assert(!it.valid());
        1:  250-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  250-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  250-block  2
call    5 never executed
        1:  251:    it.prim();
        1:  251-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     6002:  252:    while (it.valid()){
        1:  252-block  0
     6002:  252-block  1
call    0 returned 6002
branch  1 taken 6002 (fallthrough)
branch  2 taken 0 (throw)
     6002:  252-block  2
branch  3 taken 6001
branch  4 taken 1 (fallthrough)
     6001:  253:    	TCheie c = it.element().first;
     6001:  253-block  0
call    0 returned 6001
branch  1 taken 6001 (fallthrough)
branch  2 taken 0 (throw)
    6001*:  254:    	assert(d.cauta(c) == c);
     6001:  254-block  0
call    0 returned 6001
branch  1 taken 6001 (fallthrough)
branch  2 taken 0 (throw)
     6001:  254-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 6001
    %%%%%:  254-block  2
call    5 never executed
     6001:  255:        TValoare v  = it.element().second;
     6001:  255-block  0
call    0 returned 6001
branch  1 taken 6001 (fallthrough)
branch  2 taken 0 (throw)
    6001*:  256:        assert(c == v);
     6001:  256-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6001
    %%%%%:  256-block  1
call    2 never executed
     6001:  257:        it.urmator();
     6001:  257-block  0
call    0 returned 6001
branch  1 taken 6001 (fallthrough)
branch  2 taken 0 (throw)
        -:  258:    }
       1*:  259:    assert(!it.valid());
        1:  259-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  259-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  259-block  2
call    5 never executed
     6202:  260:    for (int c = cMin-100; c <= cMax+100; c++){
        1:  260-block  0
     6201:  260-block  1
     6202:  260-block  2
branch  0 taken 6201
branch  1 taken 1 (fallthrough)
     6201:  261:         d.sterge(c);
     6201:  261-block  0
call    0 returned 6201
branch  1 taken 6201 (fallthrough)
branch  2 taken 0 (throw)
    6201*:  262:         assert(d.cauta(c) == NULL_TVALOARE);
     6201:  262-block  0
call    0 returned 6201
branch  1 taken 6201 (fallthrough)
branch  2 taken 0 (throw)
     6201:  262-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 6201
    %%%%%:  262-block  2
call    5 never executed
        -:  263:    }
       1*:  264:    assert(d.dim() == 0);
        1:  264-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  264-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  264-block  2
call    5 never executed
       1*:  265:    assert(d.vid());
        1:  265-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  265-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  265-block  2
call    5 never executed
        1:  266:}
        1:  266-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  266-block  1
call    2 never executed
    $$$$$:  266-block  2
call    3 never executed
        -:  267:
function _Z12testIteratorv called 1 returned 100% blocks executed 100%
        1:  268:void testIterator() {
        1:  269:	testIterator(cresc);
        1:  269-block  0
call    0 returned 1
        1:  270:	testIterator(desc);
call    0 returned 1
        1:  271:}
        -:  272:
function _Z13testFrecventav called 1 returned 100% blocks executed 73%
        1:  273:void testFrecventa(){
        1:  274:    DO d = DO{cresc};
        1:  274-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  275:    assert(d.ceaMaiFrecventaValoare() == NULL_TVALOARE);
        1:  275-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  275-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  275-block  2
call    5 never executed
        1:  276:    populeazaDOVidIdentic(d, 10, 20);
        1:  276-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  277:    populeazaDOSh(d, 20, 30, 10);
        1:  277-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  278:    populeazaDOSh(d, 30, 35, 15);
        1:  278-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  279:    assert(d.ceaMaiFrecventaValoare() == 15);
        1:  279-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  279-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  279-block  2
call    5 never executed
        1:  280:}
        1:  280-block  0
call    0 returned 1
    $$$$$:  280-block  1
call    1 never executed
        -:  281:
function _Z13testAllExtinsv called 1 returned 100% blocks executed 100%
        1:  282:void testAllExtins() {
        1:  283:	testCreeaza();
        1:  283-block  0
call    0 returned 1
        1:  284:	testAdauga();
call    0 returned 1
        1:  285:	testCauta();
call    0 returned 1
        1:  286:	testSterge();
call    0 returned 1
        1:  287:	testIterator();
call    0 returned 1
        1:  288:	testCantitativ();
call    0 returned 1
        1:  289:    testFrecventa();
call    0 returned 1
        1:  290:}
