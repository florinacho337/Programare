     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ... a*3 - c/b + x 
    14 00000000 0200                        a dw 2
    15 00000002 0F                          c db 15
    16 00000003 04000000                    b dd 4
    17 00000007 0A000000                    x dd 10
    18 0000000B 0100000000000000            y dq 1
    19 00000013 01000000                    aux dd 1; rezerva 1 doubleword pentru aux
    20                                                         ; echiv cu aux dd 0
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ... a*3
    26 00000000 66B80300                        mov ax, 3
    27 00000004 66F725[00000000]                mul word[a]; dx:ax = a * 3
    28                                          ; salvare dx:ax
    29 0000000B 66A3[13000000]                  mov word[aux+0], ax
    30 00000011 668915[15000000]                mov word[aux+2], dx
    31                                          
    32                                          ;c/b
    33                                          ;byte/doubleword
    34                                          ;byte -> edx:eax
    35                                          
    36 00000018 0FB605[02000000]                movzx eax, byte[c]
    37 0000001F BA00000000                      mov edx, 0
    38 00000024 F735[03000000]                  div dword[b]
    39                                          ;eax = catul c/b
    40                                          ;a*3 - c/b
    41                                          ;aux - eax
    42                                          ;doubleword - doubleword
    43 0000002A 2905[13000000]                  sub [aux], eax ; aux - a*3 - c/b
    44                                          ;a*3 - c/b + x
    45                                          ;          aux + x
    46                                          ;            dd + dd
    47                                          
    48 00000030 8B1D[13000000]                  mov ebx, [aux]
    49 00000036 031D[07000000]                  add ebx, [x]
    50                                          ; ebx = a*3 - c/b + x
    51                                          
    52                                          ;a*3 - c/b + x - y
    53                                          ;                  ebx - y
    54                                          ;                   dd - dq
    55                                          ;                   32 - 64
    56                                          ; transform ebx la 64 biti
    57                                          ;adica ebx -> ecx:ebx
    58 0000003C B900000000                      mov ecx, 0
    59                                          
    60                                          ;transfera y in edx:eax
    61 00000041 A1[0B000000]                    mov eax, dword[y+0]
    62 00000046 8B15[0F000000]                  mov edx, dword[y+4]
    63                                          
    64 0000004C 29C3                            sub ebx, eax
    65 0000004E 19D1                            sbb ecx, edx
    66                                          ;ecx:edx
    67                                          ; exit(0)
    68 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
