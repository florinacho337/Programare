     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; Se da octetul A. Sa se obtina numarul intreg n reprezentat de bitii 2-4 ai lui A. 
    14                                      ; Sa se obtina apoi in B octetul rezultat prin rotirea spre dreapta a lui A cu n pozitii. Sa se obtina dublucuvantul C:
    15                                      ; bitii 8-15 ai lui C sunt 0
    16                                      ; bitii 16-23 ai lui C coincid cu bitii lui B
    17                                      ; bitii 24-31 ai lui C coincid cu bitii lui A
    18                                      ; bitii 0-7 ai lui C sunt 1
    19 00000000 65                          a db 65h
    20 00000001 00                          n db 0
    21 00000002 00                          b db 0
    22 00000003 00000000                    c dd 0
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27                                          ;1. aflam numarul intreg n
    28 00000000 A0[00000000]                    mov al, [a] ; 01100101 - 65h
    29 00000005 241C                            and al, 00011100b; 00000100 - 04h
    30 00000007 C0E802                          shr al, 2; 00000001 - 01h
    31 0000000A A2[01000000]                    mov [n], al; n = 01h = 1
    32                                          ;2. obtinem octetul b
    33 0000000F A0[00000000]                    mov al, [a]; 01100101 - 65h
    34 00000014 8A0D[01000000]                  mov cl, [n]
    35 0000001A D2C8                            ror al, cl; 10110010 - B2h
    36 0000001C A2[02000000]                    mov [b], al; b = B2h
    37                                          ;3. obtinem dword-ul c
    38 00000021 A0[00000000]                    mov al, [a]
    39 00000026 8A1D[02000000]                  mov bl, [b]
    40 0000002C 081D[04000000]                  or byte[c+1], bl
    41 00000032 800D[06000000]FF                or byte[c+3], 11111111b
    42 00000039 0805[03000000]                  or byte[c], al
    43                                          ;c = 01100101101100100000000011111111 = 65B200FFh
    44 0000003F 8B0D[03000000]                  mov ecx, [c]
    45                                          ; exit(0)
    46 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
