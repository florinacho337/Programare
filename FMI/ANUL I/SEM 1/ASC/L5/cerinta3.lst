     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;  se da un sir de dwords
    14                                      ; sa se inverseze elementele sirului
    15 00000000 010000000200000003-         s dd 1, 2, 3
    15 00000009 000000             
    16                                      ls equ ($-s)/4
    17 0000000C <res 0000000C>              r resd ls
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 BE08000000                      mov esi, ls*4-4; pozitionare esi la adresa de inceput al ultimului doubleword din sir
    24 00000005 BF00000000                      mov edi, 0; r
    25 0000000A B903000000                      mov ecx, ls
    26                                          repeta:
    27 0000000F 8B86[00000000]                      mov eax, dword[s+esi]
    28 00000015 8987[0C000000]                      mov dword[r+edi], eax
    29 0000001B 83EE04                              sub esi, 4
    30 0000001E 83C704                              add edi, 4
    31 00000021 E2EC                             loop repeta
    32                                          ; exit(0)
    33 00000023 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    34 00000025 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
